# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lib.ipc.manager_pb2 as manager__pb2


class ManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/Manager.Manager/register',
                request_serializer=manager__pb2.RegisterRequest.SerializeToString,
                response_deserializer=manager__pb2.ShardInfo.FromString,
                )
        self.guild_count = channel.unary_unary(
                '/Manager.Manager/guild_count',
                request_serializer=manager__pb2.GuildCountRequest.SerializeToString,
                response_deserializer=manager__pb2.GuildInfo.FromString,
                )
        self.checkin = channel.unary_unary(
                '/Manager.Manager/checkin',
                request_serializer=manager__pb2.ShardID.SerializeToString,
                response_deserializer=manager__pb2.CheckInResponse.FromString,
                )
        self.publish_file = channel.stream_unary(
                '/Manager.Manager/publish_file',
                request_serializer=manager__pb2.File.SerializeToString,
                response_deserializer=manager__pb2.Url.FromString,
                )
        self.all_guilds = channel.unary_stream(
                '/Manager.Manager/all_guilds',
                request_serializer=manager__pb2.AllGuildsRequest.SerializeToString,
                response_deserializer=manager__pb2.Guild.FromString,
                )
        self.guild_update = channel.stream_unary(
                '/Manager.Manager/guild_update',
                request_serializer=manager__pb2.Guild.SerializeToString,
                response_deserializer=manager__pb2.UpdateResponse.FromString,
                )


class ManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def guild_count(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publish_file(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def all_guilds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def guild_update(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=manager__pb2.RegisterRequest.FromString,
                    response_serializer=manager__pb2.ShardInfo.SerializeToString,
            ),
            'guild_count': grpc.unary_unary_rpc_method_handler(
                    servicer.guild_count,
                    request_deserializer=manager__pb2.GuildCountRequest.FromString,
                    response_serializer=manager__pb2.GuildInfo.SerializeToString,
            ),
            'checkin': grpc.unary_unary_rpc_method_handler(
                    servicer.checkin,
                    request_deserializer=manager__pb2.ShardID.FromString,
                    response_serializer=manager__pb2.CheckInResponse.SerializeToString,
            ),
            'publish_file': grpc.stream_unary_rpc_method_handler(
                    servicer.publish_file,
                    request_deserializer=manager__pb2.File.FromString,
                    response_serializer=manager__pb2.Url.SerializeToString,
            ),
            'all_guilds': grpc.unary_stream_rpc_method_handler(
                    servicer.all_guilds,
                    request_deserializer=manager__pb2.AllGuildsRequest.FromString,
                    response_serializer=manager__pb2.Guild.SerializeToString,
            ),
            'guild_update': grpc.stream_unary_rpc_method_handler(
                    servicer.guild_update,
                    request_deserializer=manager__pb2.Guild.FromString,
                    response_serializer=manager__pb2.UpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Manager.Manager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Manager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager.Manager/register',
            manager__pb2.RegisterRequest.SerializeToString,
            manager__pb2.ShardInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def guild_count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager.Manager/guild_count',
            manager__pb2.GuildCountRequest.SerializeToString,
            manager__pb2.GuildInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager.Manager/checkin',
            manager__pb2.ShardID.SerializeToString,
            manager__pb2.CheckInResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publish_file(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Manager.Manager/publish_file',
            manager__pb2.File.SerializeToString,
            manager__pb2.Url.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def all_guilds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Manager.Manager/all_guilds',
            manager__pb2.AllGuildsRequest.SerializeToString,
            manager__pb2.Guild.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def guild_update(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Manager.Manager/guild_update',
            manager__pb2.Guild.SerializeToString,
            manager__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
