syntax = "proto3";
package Logging;

service Logging {
    rpc submit(SubmitRequest) returns (SubmitReply) {}
}

message SubmitRequest {
    Event event = 1;
}

message SubmitReply {
    oneof variant {
       SubmitReplySuccess success = 1;
       SubmitReplyFailure failure = 2;
    }
}

message SubmitReplySuccess {
    // Actual ID of the generated event object,
    // which may not be the same as the original ID (if given)
    fixed64 actual_id = 1;
    // Actual timestamp of the generated event object,
    // which will be the same as the original timestamp if given
    uint64 actual_timestamp = 2;
}

message SubmitReplyFailure {
    // The type of the failure
    SubmitReplyFailureReason reason = 1;
    // Gives the human-readable reason for the failure
    string message = 2;
}

enum SubmitReplyFailureReason {
    Unknown = 0;
}

message EventSource {
    // Source gateway event inner object (optional)
    string gateway = 1;
    // Source audit log entry entity object (optional)
    string audit_log = 2;
}

enum EventOrigin {
    EventOriginUnknown = 0;
    // Action originated from the gateway and was caught as it originated
    EventOriginGateway = 1;
    // Action originated from the audit log
    EventOriginAuditLog = 2;
    // Gateway events that also incorporate a corresponding audit log entry
    EventOriginHybrid = 3;
    // Action originated from a scheduled recovery job where the bot knew it had
    // ingestion downtime and ran a recovery job to collect all relevant origin/update events
    EventOriginScheduledRecovery = 4;
    // Action originated from an unscheduled recovery job where the bot was
    // scanning history and verifying that the logs have the up-to-date state
    EventOriginUnscheduledRecovery = 5;
    // Action comes from the internal logs endpoint
    EventOriginLogs = 6;
    // Action comes from some other internal process
    EventOriginInternal = 7;
}

enum EventType {
    EventTypeUnknown = 0;

    EventTypeGuildUpdate = 1;
    EventTypeChannelCreate = 10;
    EventTypeChannelUpdate = 11;
    EventTypeChannelDelete = 12;
    EventTypeChannelOverwriteCreate = 13;
    EventTypeChannelOverwriteUpdate = 14;
    EventTypeChannelOverwriteDelete = 15;
    EventTypeMemberKick = 20;
    EventTypeMemberPrune = 21;
    EventTypeMemberBanAdd = 22;
    EventTypeMemberBanRemove = 23;
    EventTypeMemberUpdate = 24;
    EventTypeMemberRoleUpdate = 25;
    EventTypeMemberMove = 26;
    EventTypeMemberDisconnect = 27;
    EventTypeBotAdd = 28;
    EventTypeRoleCreate = 30;
    EventTypeRoleUpdate = 31;
    EventTypeRoleDelete = 32;
    EventTypeInviteCreate = 40;
    EventTypeInviteUpdate = 41;
    EventTypeInviteDelete = 42;
    EventTypeWebhookCreate = 50;
    EventTypeWebhookUpdate = 51;
    EventTypeWebhookDelete = 52;
    EventTypeEmojiCreate = 60;
    EventTypeEmojiUpdate = 61;
    EventTypeEmojiDelete = 62;
    EventTypeMessageDelete = 72;
    EventTypeMessageBulkDelete = 73;
    EventTypeMessagePin = 74;
    EventTypeMessageUnpin = 75;
    EventTypeIntegrationCreate = 80;
    EventTypeIntegrationUpdate = 81;
    EventTypeIntegrationDelete = 82;

    EventTypeMessageSend = 3001;
    EventTypeMessageEdit = 3002;
    EventTypeReactionAdd = 3003;
    EventTypeReactionRemove = 3004;
    EventTypeReactionRemoveAll = 3005;
    EventTypeMemberJoin = 3006;
    EventTypeMemberLeave = 3007;
    EventTypeGuildUnavailable = 3008;
    EventTypeVoiceStateUpdate = 3009;
    EventTypeVoiceServerUpdate = 3010;

    EventTypeAutoResponseCreate = 3100;
    EventTypeAutoResponseUpdate = 3101;
    EventTypeAutoResponseDelete = 3102;
    EventTypeAutoResponseTrigger = 3103;

    EventTypeLogRevert = 3200;
    EventTypeLogRollback = 3201;
    EventTypeLogRecoveryRun = 3202;

    EventTypeCustomEmojiCreate = 3300;
    EventTypeCustomEmojiUpdate = 3301;
    EventTypeCustomEmojiDelete = 3302;
    EventTypeCustomEmojiUse = 3303;
    EventTypeCustomEmojiCache = 3304;
    EventTypeCustomEmojiLoad = 3305;

    EventTypeSettingsUpdate = 3400;

    EventTypeArchitusJoin = 4000;
    EventTypeArchitusLeave = 4001;
    EventTypeUserPrivacyUpdate = 4002;

    EventTypeLogDebug = 9000;
    EventTypeLogInfo = 9001;
    EventTypeLogWarn = 9002;
    EventTypeLogError = 9003;
    EventTypeLogCritical = 9004;
}

message Event {
    // Id using snowflake format;
    // using the *time that the event was received by wherever it's ingested*
    // Will be generated if not provided
    fixed64 id = 1;
    // Unix timestamp of the *time of the underlying event* (if available),
    // else some meaningful timestamp describing when the event was ingested
    // Will be generated if not provided
    uint64 timestamp = 2;
    // The source data; including the original gateway/audit log entries
    EventSource source = 3;
    // The origin type of the event
    EventOrigin origin = 4;
    // The type of action the event is
    EventType event_type = 5;
    // Related guild the event occurred in
    fixed64 guild_id = 6;
    // Id of the entity that caused the event to occur
    fixed64 agent_id = 7;
    // Id of the entity that the event is about/affects
    // (can be any Id type)
    fixed64 subject_id = 8;
    // Id of the corresponding audit log entry this event corresponds to; if any
    // (included for indexing purposes)
    fixed64 audit_log_id  = 9;
    // Optional reason for the log event (can attach additional info here
    string reason = 10;
}

