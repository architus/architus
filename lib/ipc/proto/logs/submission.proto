syntax = "proto3";
package logs.submission;

service SubmissionService {
  // Submits a single log event to be imported into the Elasticsearch database.
  // If the ID already exists, then no event is imported..
  // Requires a valid ID, Guild ID, and timestamp.
  rpc submit_idempotent(SubmitIdempotentRequest) returns (SubmitIdempotentResponse) {}
}

message SubmitIdempotentRequest {
  // The log event being submitted
  Event event = 1;
}

message SubmitIdempotentResponse {}

message Event {
  // Id using snowflake format;
  // using the *time that the event was received by wherever it's ingested*
  // Will be generated if not provided
  fixed64 id = 1;
  // Unix timestamp of the *time of the underlying event* (if available),
  // else some meaningful timestamp describing when the event was ingested
  // Will be generated if not provided
  uint64 timestamp = 2;
  // The source data; including the original gateway/audit log entries
  // Not indexed in ES
  EventSource source = 3;
  // The origin type of the event
  EventOrigin origin = 4;
  // The type of action the event is
  EventType type = 5;
  // (required) Related guild the event occurred in
  fixed64 guild_id = 6;
  // Optional reason for the log event (can attach additional info here)
  string reason = 7;
  // Id of the corresponding audit log entry this event corresponds to; if any
  // (included for indexing purposes)
  fixed64 audit_log_id  = 8;
  // The channel that the event occurred in, if applicable
  fixed64 channel_id = 9;
  // Name of the channel that the event occurred in (used in the frontend).
  // Providing it will automatically update the revision cache in etcd,
  // and this value will not be stored or indexed in ES
  string channel_name = 10;
  // Id of the entity that caused the event to occur, if applicable
  fixed64 agent_id = 11;
  // Type of the entity with the id in `agent_id`
  EntityType agent_type = 12;
  // Display-oriented metadata about the agent entity
  // Not indexed in ES
  EntityMetadata agent_metadata = 13;
  // Id of the entity that the event is about/affects, if applicable
  fixed64 subject_id = 14;
  // Type of the entity with the id in `subject_id`
  EntityType subject_type = 15;
  // Display-oriented metadata about the subject entity
  // Not indexed in ES
  fixed64 subject_metadata = 16;
  // Id of some other related entity involved in the event, if applicable
  fixed64 auxiliary_id = 17;
  // Type of the entity with the id in `auxiliary_id`
  fixed64 auxiliary_type = 18;
  // Display-oriented metadata about the auxiliary entity
  // Not indexed in ES
  fixed64 auxiliary_metadata = 19;
  // Rich-formatted content that includes markdown and mention-syntax,
  // also includes color-embed extension support.
  // Used in the frontend as the primary textual display of the event
  // Indexed in ES as text using the standard analyzer
  string content = 20;
  // Additional metadata about the content that is indexed in ES
  // and is used to display and index the more structured components of the content
  ContentMetadata content_metadata = 21;
}

// Represents a switchable enum for variably-typed fields in the Event struct
enum EntityType {
  // Default entity type; prefer adding a new option
  EntityTypeOther = 0;
  // User-like entity that has a concrete user/member object,
  // and a username, nickname, and color that is stored in the revision cache
  EntityTypeUserLike = 1;
  // Message entity
  EntityTypeMessage = 2;
  // Role entity, has a name and color that is stored in the revision cache
  EntityTypeRole = 3;
  // Channel entity, has a name that is stored in the revision cache
  EntityTypeChannel = 4;
  // TODO add additional values as needed
}

// Used to control display-oriented data or update revision cache
// If provided and the type is a channel, role, or user-like,
// then the data is used to update the revision cache and removed before storing in ES.
// If provided and the type is anything else,
// then the values will be stored in the "override" fields in ES
message EntityMetadata {
  string name = 1;
  // Only required when the entity type is user-like
  string nickname = 2;
  // Only required when the entity type is a role or a user-like
  string color = 3;
}

// The type of agent that caused the original event to occur.
// Results in small badges next to agents in the UI and adds a filterable option
enum AgentVariant {
  // No special display (used for normal users)
  AgentVariantNone = 0;
  // Adds a "bot" badge next to the agent in the frontend
  AgentVariantBot = 1;
  // Adds a "webhook" badge next to the agent in the frontend
  AgentVariantWebhook = 2;
  // Adds a "system" badge next to the agent in the frontend, used for Discord messages
  AgentVariantSystem = 3;
  // Adds a special display that overrides the normal display
  AgentVariantArchitus = 4;
}

// Additional metadata about the content that is indexed in ES
// and is used to display and index the more structured components of the content
message ContentMetadata {
  // The user ID of all users mentioned in the content
  repeated fixed64 users_mentioned = 1;
  // The channel ID of all channels mentioned in the content
  repeated fixed64 channels_mentioned = 2;
  // The role ID of all roles mentioned in the content
  repeated fixed64 roles_mentioned = 3;
  // The normalized shortcode of all standard emojis used in the content
  repeated string emojis_used = 4;
  // The emoji ID of all custom emojis used in the content
  repeated fixed64 custom_emojis_used = 5;
  // The emoji shortcodes of all custom emojis used in the content
  repeated string custom_emoji_names_used = 6;
  // The url stems of all urls in the content, including all intermediate subdomains
  // eg. https://www.google.com/ results in `www.google.com` and `google.com`
  repeated string url_stems = 7;
}

// The backing JSON that represents the source of the event.
// Note that this message does not use the generic Struct message
// (from the Google well-known types) because it only supports f64 numbers,
// which may cause problems in the future.
// Instead, the internal JSON is sent as a string
message EventSource {
  // Source gateway event inner object (optional)
  string gateway = 1;
  // Source audit log entry entity object (optional)
  string audit_log = 2;
  // Source internal data object (optional)
  string internal = 3;
}

enum EventOrigin {
  EventOriginUnknown = 0;
  // Action originated from the gateway and was caught as it originated
  EventOriginGateway = 1;
  // Action originated from the audit log
  EventOriginAuditLog = 2;
  // Gateway events that also incorporate a corresponding audit log entry
  EventOriginHybrid = 3;
  // Action originated from a scheduled recovery job where the bot knew it had
  // ingestion downtime and ran a recovery job to collect all relevant origin/update events
  EventOriginScheduledRecovery = 4;
  // Action originated from an unscheduled recovery job where the bot was
  // scanning history and verifying that the logs have the up-to-date state
  EventOriginUnscheduledRecovery = 5;
  // Action comes from some other internal process
  EventOriginInternal = 6;
}

enum EventType {
  EventTypeUnknown = 0;

  EventTypeGuildUpdate = 1;
  EventTypeChannelCreate = 10;
  EventTypeChannelUpdate = 11;
  EventTypeChannelDelete = 12;
  EventTypeChannelOverwriteCreate = 13;
  EventTypeChannelOverwriteUpdate = 14;
  EventTypeChannelOverwriteDelete = 15;
  EventTypeMemberKick = 20;
  EventTypeMemberPrune = 21;
  EventTypeMemberBanAdd = 22;
  EventTypeMemberBanRemove = 23;
  EventTypeMemberUpdate = 24;
  EventTypeMemberRoleUpdate = 25;
  EventTypeMemberMove = 26;
  EventTypeMemberDisconnect = 27;
  EventTypeBotAdd = 28;
  EventTypeRoleCreate = 30;
  EventTypeRoleUpdate = 31;
  EventTypeRoleDelete = 32;
  EventTypeInviteCreate = 40;
  EventTypeInviteUpdate = 41;
  EventTypeInviteDelete = 42;
  EventTypeWebhookCreate = 50;
  EventTypeWebhookUpdate = 51;
  EventTypeWebhookDelete = 52;
  EventTypeEmojiCreate = 60;
  EventTypeEmojiUpdate = 61;
  EventTypeEmojiDelete = 62;
  EventTypeMessageDelete = 72;
  EventTypeMessageBulkDelete = 73;
  EventTypeMessagePin = 74;
  EventTypeMessageUnpin = 75;
  EventTypeIntegrationCreate = 80;
  EventTypeIntegrationUpdate = 81;
  EventTypeIntegrationDelete = 82;

  EventTypeMessageSend = 3001;
  EventTypeMessageEdit = 3002;
  EventTypeReactionAdd = 3003;
  EventTypeReactionRemove = 3004;
  EventTypeReactionRemoveAll = 3005;
  EventTypeMemberJoin = 3006;
  EventTypeMemberLeave = 3007;
  EventTypeGuildUnavailable = 3008;
  EventTypeVoiceStateUpdate = 3009;
  EventTypeVoiceServerUpdate = 3010;

  EventTypeAutoResponseCreate = 3100;
  EventTypeAutoResponseUpdate = 3101;
  EventTypeAutoResponseDelete = 3102;
  EventTypeAutoResponseTrigger = 3103;

  EventTypeLogRevert = 3200;
  EventTypeLogRollback = 3201;
  EventTypeLogRecoveryRun = 3202;

  EventTypeCustomEmojiCreate = 3300;
  EventTypeCustomEmojiUpdate = 3301;
  EventTypeCustomEmojiDelete = 3302;
  EventTypeCustomEmojiUse = 3303;
  EventTypeCustomEmojiCache = 3304;
  EventTypeCustomEmojiLoad = 3305;

  EventTypeSettingsUpdate = 3400;

  EventTypeArchitusJoin = 4000;
  EventTypeArchitusLeave = 4001;
  EventTypeUserPrivacyUpdate = 4002;
}
